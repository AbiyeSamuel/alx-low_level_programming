!<arch>
0-isupper.c/    0           0     0     644     200       `
#include "main.h"

/**
 * _isupper - checks for uppercase alphabets
 * @c: character to be checked
 * Return: 0 or 1
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	return (0);
}
0-memset.c/     0           0     0     644     319       `
#include "main.h"

/**
 * _memset - function that fils a block of memory with a value
 * @s: location of memory
 * @b: desired value to be used
 * @n: number of bytes
 * Return: changed array
 */

char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     342       `
#include "main.h"

/**
 * _strcat - function that concatenates 2 strings
 * @dest: destinaton
 * @src: source
 * Return: Always 0
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	j = 0;

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     411       `
#include "main.h"

/**
 * _atoi - changes string to integer
 * @s: string to be changed
 * Return: int
 */

int _atoi(char *s)
{
	int sign = 1, i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		i++;
	}

	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		res = (res * 10) + (s[i] - '0');
		i++;
	}
	res *= sign;
	return (res);
}

1-isdigit.c/    0           0     0     644     169       `
#include "main.h"

/**
 * _isdigit - finds digits from 0 to 9
 * @c: string to be checked
 * Return: 1 or 0
 */

int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     348       `
#include "main.h"

/**
 * _memcpy - functions that copies memory
 * @dest: destination for copy
 * @src: source from where copy is taking place
 * @n: number of bytes
 * Return: copied memory
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     391       `
#include "main.h"

/**
 * _strncat - function that concatenate 2 strings
 * @dest: destination
 * @src: source
 * @n: number of bytes
 * Return: destination value
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     225       `
#include "main.h"

/**
 * _strchr - returns string
 * @s: string
 * @c: char
 * Return: 0
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     221       `
#include "main.h"

/**
 * _strlen - returns the length of a given string
 * @s: string
 * Return: Length of the string
 */

int _strlen(char *s)
{
	int str = 0;

	while (*s != '\0')
	{
		str++;
		s++;
	}
	return (str);
}

2-strncpy.c/    0           0     0     644     345       `
#include "main.h"

/**
 * _strncpy - function that copies a string
 * @dest: destination
 * @src: source
 * @n: number of bytes
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}

	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     174       `
#include "main.h"

/**
 * _islower - function that checks for lowercase
 * @c: string to check
 * Return: 0 or 1
 */

int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     214       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - print a string to the standard output
 * @str: string
 *
 *
 * Return: newline
 */

void _puts(char *str)
{
	while (*str)
		_putchar(*str++);
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     289       `
#include "main.h"

/**
 * _strcmp - compares strings
 * @s1: first input
 * @s2: second input
 *
 * Return: void
 */

int _strcmp(char *s1, char *s2)
{
	int a = 0;
	while (s1[a] != '\0' && s2[a] != '\0')
	{
		if (s1[a] != s2[a])
		{
			return (s1[a] - s2[a]);
		}
		a++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     360       `
#include "main.h"

/**
 * _strspn - entry point
 * @s: input
 * @accept: input
 * Return: void
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     187       `
#include "main.h"

/**
 * _isalpha - check for alphabet in a string
 * @c: char
 * Return: 0 or 1
 */

int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     287       `
#include "main.h"

/**
 * _strpbrk - starting point for program
 * @s: string
 * @accept: input
 * Return: void
 */

char *_strpbrk(char *s, char *accept)
{
	int b;

	while (*s)
	{
		for (b = 0; accept[b]; b++)
		{
			if (*s == accept[b])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     363       `
#include "main.h"

/**
 * _strstr - starting point
 * @haystack: input parameter
 * @needle: input
 * Return: 0
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *a = haystack;
		char *b = needle;

		while (*a == *b && *b != '\0')
		{
			a++;
			b++;
		}
		if (*b == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     168       `
#include "main.h"

/**
 * _abs - prints absolute value of interger
 * @n: int to check
 * Return: int
 */

int _abs(int n)
{
	if (n >= 0)
		return (n);
	return (-n);
}
9-strcpy.c/     0           0     0     644     309       `
#include "main.h"

/**
 * _strcpy - copies a string form src
 * @dest: destination location
 * @src: source
 * Return: char
 */

char *_strcpy(char *dest, char *src)
{
	int a = 0;
	int b = 0;

	while (*(src + a) != '\0')
	{
		a++;
	}
	for (; b < a; b++)
		dest[b] = src[b];
	dest[a] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

